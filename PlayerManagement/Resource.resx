<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AntColonyLanguageNotValid" xml:space="preserve">
    <value>Wrong setting for languages.</value>
    <comment>Error message when ant colony language has not been set properly.</comment>
  </data>
  <data name="AntColonyNameNotValid" xml:space="preserve">
    <value>The name can only contain letters and numbers, is not allowed to begin with a number and needs to be between 2 and 20 characters long.</value>
    <comment>Error message when ant colony name contains non valid characters or does not satisfy length requirements.</comment>
  </data>
  <data name="AntColonyOutputFolderDoesNotExist" xml:space="preserve">
    <value>Output folder does not exist.</value>
    <comment>Error message when ant colony should be saved in directory that does not exist.</comment>
  </data>
  <data name="AntPropertiesAuthorFormat" xml:space="preserve">
    <value>{0} {1}</value>
    <comment>Format of author-tag (AntProperties.cs)
0: First Name
1: Last Name</comment>
  </data>
  <data name="AntPropertiesDbAccess" xml:space="preserve">
    <value>Access to a database</value>
    <comment>To tell the user, that the ant needs DB-Access (AntProperties.cs)</comment>
  </data>
  <data name="AntPropertiesIoAccess" xml:space="preserve">
    <value>Access to the file system</value>
    <comment>To tell the user, that the ant needs IO-Access (AntProperties.cs)</comment>
  </data>
  <data name="AntPropertiesNetAccess" xml:space="preserve">
    <value>Access to the network</value>
    <comment>To tell the user, that the ant needs Network-Access (AntProperties.cs)</comment>
  </data>
  <data name="AntPropertiesNoAccess" xml:space="preserve">
    <value>Full access limitation</value>
    <comment>To tell the user, that the ant needs no Access (AntProperties.cs)</comment>
  </data>
  <data name="AntPropertiesNoAdditionalInfos" xml:space="preserve">
    <value>No further information available.</value>
    <comment>Text, if there are no additional info to access-requests (AntProperties.cs)</comment>
  </data>
  <data name="AntPropertiesRefAccess" xml:space="preserve">
    <value>Ant references external assembly or assemblies.</value>
    <comment>To tell the user, that the ant needs Ref-Access (AntProperties.cs)</comment>
  </data>
  <data name="AntPropertiesTitle" xml:space="preserve">
    <value>Properties of {0}</value>
    <comment>Title-Bar of ant-property-window (AntProperties.cs)
0: Folkname</comment>
  </data>
  <data name="AntPropertiesUiAccess" xml:space="preserve">
    <value>Access to the user interface</value>
    <comment>To tell the user, that the ant needs UI-Access (AntProperties.cs)</comment>
  </data>
  <data name="AntPropertiesUnknown" xml:space="preserve">
    <value>Unknown</value>
    <comment>Unknown information at filesize and filecreationtime (AntProperties.cs)</comment>
  </data>
  <data name="No" xml:space="preserve">
    <value>no</value>
    <comment>Various uses of no (AntProperties.cs)</comment>
  </data>
  <data name="PlayerSelectorOpenIde" xml:space="preserve">
    <value>A new ant template has been created. To see your new ant in the game however it has to be first opened and compiled in an integrated development environment. Should the integrated development environment be opened now?</value>
    <comment>Message displayed asking whether IDE should be launched.</comment>
  </data>
  <data name="PlayerSelectorOpenIdeTitle" xml:space="preserve">
    <value>Edit ant</value>
    <comment>Message title displayed asking whether IDE should be launched.</comment>
  </data>
  <data name="SimulationPluginRightsLocked" xml:space="preserve">
    <value>Following rights are not granted in the settings:</value>
    <comment>Header of a list of not granted rights (RightsRequest.cs)</comment>
  </data>
  <data name="SimulationPluginRuleViolation" xml:space="preserve">
    <value>This colony creates a ruleViolation with current settings: {0}</value>
    <comment>Is used to show errormessage in listview-Tooltip (TeamSetup.cs)
0: Message of RuleViolation</comment>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>yes</value>
    <comment>Various uses of yes (AntProperties.cs)</comment>
  </data>
</root>