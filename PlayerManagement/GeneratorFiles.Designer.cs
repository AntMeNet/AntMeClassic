//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AntMe.PlayerManagement {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class GeneratorFiles {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal GeneratorFiles() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AntMe.PlayerManagement.GeneratorFiles", typeof(GeneratorFiles).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using AntMe.Deutsch;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace AntMe.Player.{2}
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Diese Datei enthält die Beschreibung für deine Ameise. Die einzelnen Code-Blöcke 
        ///    /// (Beginnend mit &quot;public override void&quot;) fassen zusammen, wie deine Ameise in den 
        ///    /// entsprechenden Situationen reagieren soll. Welche Befehle du hier verwenden kannst, 
        ///    /// findest du auf der Befehlsübersicht im Wiki (https://wiki.antme.net/de/ [rest of string was truncated]&quotquot;;.
        /// </summary>
        internal static string class_cs_de_docu {
            get {
                return ResourceManager.GetString("class_cs_de_docu", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using AntMe.English;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace AntMe.Player.{2}
        ///{
        ///    [Player(
        ///        ColonyName = &quot;{2}&quot;,
        ///        FirstName = &quot;&quot;,
        ///        LastName = &quot;&quot;
        ///    )]
        ///    [Caste(
        ///        Name = &quot;Default&quot;,
        ///        AttackModifier = 0,
        ///        EnergyModifier = 0,
        ///        LoadModifier = 0,
        ///        RangeModifier = 0,
        ///        RotationSpeedModifier = 0,
        ///        SpeedModifier = 0,
        ///        ViewRangeModifier = 0
        ///    )]
        ///    public c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string class_cs_en_docu {
            get {
                return ResourceManager.GetString("class_cs_en_docu", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imports System.Collections.Generic
        ///
        ///Imports AntMe.Deutsch
        ///
        ///&apos;&apos;&apos; &lt;summary&gt;
        ///&apos;&apos;&apos; Diese Datei enthält die Beschreibung für deine Ameise. Die einzelnen Code-Blöcke 
        ///&apos;&apos;&apos; (Beginnend mit &quot;public override void&quot;) fassen zusammen, wie deine Ameise in den 
        ///&apos;&apos;&apos; entsprechenden Situationen reagieren soll. Welche Befehle du hier verwenden kannst, 
        ///&apos;&apos;&apos; findest du auf der Befehlsübersicht im Wiki (http://wiki.antme.net/de/API1:Befehlsliste).
        ///&apos;&apos;&apos; 
        ///&apos;&apos;&apos; Wenn du etwas Unterstützung bei der Erstellung einer Ameise brauch [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string class_vb_de_docu {
            get {
                return ResourceManager.GetString("class_vb_de_docu", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imports System.Collections.Generic
        ///
        ///Imports AntMe.English
        ///
        ///&lt;Player( _
        ///    ColonyName:=&quot;{2}&quot;, _
        ///    FirstName:=&quot;&quot;, _
        ///    LastName:=&quot;&quot; _
        ///)&gt; _
        ///&lt;Caste( _
        ///    Name:=&quot;Default&quot;, _
        ///    SpeedModifier:=0, _
        ///    RotationSpeedModifier:=0, _
        ///    LoadModifier:=0, _
        ///    RangeModifier:=0, _
        ///    ViewRangeModifier:=0, _
        ///    EnergyModifier:=0, _
        ///    AttackModifier:=0 _
        ///)&gt; _
        ///Public Class {0}
        ///    Inherits BaseAnt
        ///
        ///#Region &quot;Casts&quot;
        ///
        ///    &apos;&apos;&apos; &lt;summary&gt;
        ///    &apos;&apos;&apos; Every time that a new ant is born, its job grou [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string class_vb_en_docu {
            get {
                return ResourceManager.GetString("class_vb_en_docu", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;Project ToolsVersion=&quot;12.0&quot; DefaultTargets=&quot;Build&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;
        ///  &lt;Import Project=&quot;$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props&quot; Condition=&quot;Exists(&apos;$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props&apos;)&quot; /&gt;
        ///  &lt;PropertyGroup&gt;
        ///    &lt;Configuration Condition=&quot; &apos;$(Configuration)&apos; == &apos;&apos; &quot;&gt;Debug&lt;/Configuration&gt;
        ///    &lt;Platform Condition=&quot; &apos;$(Platform)&apos; == &apos;&apos; &quot;&gt;AnyCPU&lt;/Platform&gt;
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string project {
            get {
                return ResourceManager.GetString("project", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;Project ToolsVersion=&quot;12.0&quot; DefaultTargets=&quot;Build&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;
        ///  &lt;Import Project=&quot;$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props&quot; Condition=&quot;Exists(&apos;$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props&apos;)&quot; /&gt;
        ///  &lt;PropertyGroup&gt;
        ///    &lt;Configuration Condition=&quot; &apos;$(Configuration)&apos; == &apos;&apos; &quot;&gt;Debug&lt;/Configuration&gt;
        ///    &lt;Platform Condition=&quot; &apos;$(Platform)&apos; == &apos;&apos; &quot;&gt;AnyCPU&lt;/Platform&gt;
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string project_vb {
            get {
                return ResourceManager.GetString("project_vb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.Reflection;
        ///using System.Runtime.CompilerServices;
        ///using System.Runtime.InteropServices;
        ///
        ///// General Information about an assembly is controlled through the following 
        ///// set of attributes. Change these attribute values to modify the information
        ///// associated with an assembly.
        ///[assembly: AssemblyTitle(&quot;AntMe! Player&quot;)]
        ///[assembly: AssemblyDescription(&quot;&quot;)]
        ///[assembly: AssemblyConfiguration(&quot;&quot;)]
        ///[assembly: AssemblyCompany(&quot;&quot;)]
        ///[assembly: AssemblyProduct(&quot;AntMe!&quot;)]
        ///[assembly: AssemblyCop [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string properties {
            get {
                return ResourceManager.GetString("properties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imports System
        ///Imports System.Reflection
        ///Imports System.Runtime.InteropServices
        ///
        ///&apos; General Information about an assembly is controlled through the following 
        ///&apos; set of attributes. Change these attribute values to modify the information
        ///&apos; associated with an assembly.
        ///
        ///&apos; Review the values of the assembly attributes
        ///
        ///&lt;Assembly: AssemblyTitle(&quot;AntMe! Player&quot;)&gt; 
        ///&lt;Assembly: AssemblyDescription(&quot;&quot;)&gt; 
        ///&lt;Assembly: AssemblyCompany(&quot;&quot;)&gt; 
        ///&lt;Assembly: AssemblyProduct(&quot;AntMe!&quot;)&gt; 
        ///&lt;Assembly: AssemblyCopyright(&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string properties_vb {
            get {
                return ResourceManager.GetString("properties_vb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Microsoft Visual Studio Solution File, Format Version 12.00
        ///# Visual Studio 2013
        ///VisualStudioVersion = 12.0.31101.0
        ///MinimumVisualStudioVersion = 10.0.40219.1
        ///Project(&quot;{{3}}&quot;) = &quot;{2}&quot;, &quot;{2}.csproj&quot;, &quot;{{4}}&quot;
        ///EndProject
        ///Global
        ///	GlobalSection(SolutionConfigurationPlatforms) = preSolution
        ///		Debug|Any CPU = Debug|Any CPU
        ///		Release|Any CPU = Release|Any CPU
        ///	EndGlobalSection
        ///	GlobalSection(ProjectConfigurationPlatforms) = postSolution
        ///		{{4}}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
        ///		{{4}}.Debug|Any [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string solution {
            get {
                return ResourceManager.GetString("solution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Microsoft Visual Studio Solution File, Format Version 12.00
        ///# Visual Studio 2013
        ///VisualStudioVersion = 12.0.31101.0
        ///MinimumVisualStudioVersion = 10.0.40219.1
        ///Project(&quot;{{3}}&quot;) = &quot;{2}&quot;, &quot;{2}.vbproj&quot;, &quot;{{4}}&quot;
        ///EndProject
        ///Global
        ///	GlobalSection(SolutionConfigurationPlatforms) = preSolution
        ///		Debug|Any CPU = Debug|Any CPU
        ///		Release|Any CPU = Release|Any CPU
        ///	EndGlobalSection
        ///	GlobalSection(ProjectConfigurationPlatforms) = postSolution
        ///		{{4}}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
        ///		{{4}}.Debug|Any [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string solution_vb {
            get {
                return ResourceManager.GetString("solution_vb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;Project ToolsVersion=&quot;12.0&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;
        ///  &lt;PropertyGroup Condition=&quot;&apos;$(Configuration)|$(Platform)&apos; == &apos;Release|AnyCPU&apos;&quot;&gt;
        ///    &lt;StartAction&gt;Program&lt;/StartAction&gt;
        ///    &lt;StartProgram&gt;{6}\AntMe.exe&lt;/StartProgram&gt;
        ///    &lt;StartArguments&gt;/file=&quot;{7}\bin\AntMe.Player.{2}.dll&quot;&lt;/StartArguments&gt;
        ///  &lt;/PropertyGroup&gt;
        ///  &lt;PropertyGroup Condition=&quot;&apos;$(Configuration)|$(Platform)&apos; == &apos;Debug|AnyCPU&apos;&quot;&gt;
        ///    &lt;StartAction&gt;Program&lt;/StartActio [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string user {
            get {
                return ResourceManager.GetString("user", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;Project ToolsVersion=&quot;12.0&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;
        ///  &lt;PropertyGroup Condition=&quot;&apos;$(Configuration)|$(Platform)&apos; == &apos;Release|AnyCPU&apos;&quot;&gt;
        ///    &lt;StartAction&gt;Program&lt;/StartAction&gt;
        ///    &lt;StartProgram&gt;{6}\AntMe.exe&lt;/StartProgram&gt;
        ///    &lt;StartArguments&gt;/file=&quot;{7}\bin\AntMe.Player.{2}.dll&quot;&lt;/StartArguments&gt;
        ///  &lt;/PropertyGroup&gt;
        ///  &lt;PropertyGroup Condition=&quot;&apos;$(Configuration)|$(Platform)&apos; == &apos;Debug|AnyCPU&apos;&quot;&gt;
        ///    &lt;StartAction&gt;Program&lt;/StartActio [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string user_vb {
            get {
                return ResourceManager.GetString("user_vb", resourceCulture);
            }
        }
    }
}
